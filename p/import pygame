import pygame
import time
import random

pygame.font.init()

WIDTH, HEIGHT = 1000, 800
WIN = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Space Dodge")

BG = pygame.transform.scale(pygame.image.load("bg still.jpeg"), (WIDTH, HEIGHT))

# Load player image
PLAYER_WIDTH, PLAYER_HEIGHT = 50, 70  # Define the dimensions
PLAYER_IMAGE = pygame.transform.scale(pygame.image.load("ship.png"), (PLAYER_WIDTH, PLAYER_HEIGHT))

STAR_WIDTH = 10
STAR_HEIGHT = 20
STAR_VEL = 3

FONT = pygame.font.SysFont("comicsans", 30)

WHITE = (255, 255, 255)

def draw(player, elapsed_time, stars):
    WIN.blit(BG, (0, 0))
    time_text = FONT.render(f"Time: {round(elapsed_time)}s", 1, WHITE)
    WIN.blit(time_text, (10, 10))

    # Draw the player image
    WIN.blit(PLAYER_IMAGE, (player.x, player.y))

    for star in stars:
        pygame.draw.rect(WIN, WHITE, star)

    pygame.display.update()


def handle_player_movement(player):
    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT] and player.x - STAR_VEL >= 0:
        player.x -= STAR_VEL
    if keys[pygame.K_RIGHT] and player.x + STAR_VEL + player.width <= WIDTH:
        player.x += STAR_VEL


def create_star():
    star_x = random.randint(0, WIDTH - STAR_WIDTH)
    return pygame.Rect(star_x, -STAR_HEIGHT, STAR_WIDTH, STAR_HEIGHT)


def main():
    run = True
    game_over = False

    # Use the player image dimensions for the player rectangle
    player = pygame.Rect(200, HEIGHT - PLAYER_HEIGHT, PLAYER_WIDTH, PLAYER_HEIGHT)

    clock = pygame.time.Clock()
    start_time = pygame.time.get_ticks()
    elapsed_time = 0

    star_add_increment = 1000
    star_count = 0

    stars = []

    while run:
        star_count += clock.tick(150)
        elapsed_time = (pygame.time.get_ticks() - start_time) / 1000

        if star_count > star_add_increment:
            for _ in range(3):
                stars.append(create_star())

            star_add_increment = max(200, star_add_increment - 50)
            star_count = 0

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
                break

        handle_player_movement(player)

        for star in stars[:]:
            star.y += STAR_VEL
            if star.colliderect(player):
                stars.remove(star)
                run = False
                game_over = True # Set game_over to True on collision
                break
            elif star.y > HEIGHT:
                stars.remove(star)

        draw(player, elapsed_time, stars)

        if game_over:
            #Display"Game Over" message
            game_over_text = FONT.render("Game Over!", 1, "red")
            WIN.blit(game_over_text, (WIDTH/2 - game_over_text.get_width()/2, HEIGHT/2 - game_over_text.get_height()/2))
            pygame.display.update()

            # Wait for 4 seconds
            pygame.time.delay(4000)

            break  # Exit the game loop after displaying the "Game Over" message

    pygame.quit()

if __name__ == "__main__":
    main()
