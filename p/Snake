import pygame
import sys
import random
from collections import deque

# Constants
WIDTH, HEIGHT = 640, 480
CELL_SIZE = 20
FRAME_RATE = 60
MOVE_INTERVAL = 100
UP = pygame.Vector2(0, -1)
DOWN = pygame.Vector2(0, 1)
LEFT = pygame.Vector2(-1, 0)
RIGHT = pygame.Vector2(1, 0)
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)

def init_pygame():
    pygame.init()
    screen = pygame.display.set_mode((WIDTH, HEIGHT))
    pygame.display.set_caption('Smooth Snake Game')
    return screen

def load_assets():
    return {
        'font': pygame.font.Font(None, 36),
        'clock': pygame.time.Clock(),
        'eat_sound': pygame.mixer.Sound('eat.wav'),
        'game_over_sound': pygame.mixer.Sound('game_over.wav')
    }

def draw_snake(screen, snake):
    for segment in snake:
        rect = pygame.Rect(segment.x * CELL_SIZE, segment.y * CELL_SIZE, CELL_SIZE, CELL_SIZE)
        pygame.draw.rect(screen, GREEN, rect)

def draw_apple(screen, apple_position):
    rect = pygame.Rect(apple_position.x * CELL_SIZE, apple_position.y * CELL_SIZE, CELL_SIZE, CELL_SIZE)
    pygame.draw.rect(screen, RED, rect)

def random_apple_position(snake):
    possible_positions = [
        pygame.Vector2(x, y)
        for x in range(0, WIDTH // CELL_SIZE)
        for y in range(0, HEIGHT // CELL_SIZE)
        if pygame.Vector2(x, y) not in snake
    ]
    return random.choice(possible_positions) if possible_positions else None

def show_game_over(screen, font, score, high_score, assets):
    if score > high_score:
        high_score = score
        save_high_score(high_score)
    game_over_text = font.render('Game Over', True, WHITE)
    score_text = font.render(f'Score: {score} High Score: {high_score}', True, WHITE)
    restart_text = font.render('Press any key to restart...', True, WHITE)
    game_over_rect = game_over_text.get_rect(center=(WIDTH // 2, HEIGHT // 2 - 40))
    score_rect = score_text.get_rect(center=(WIDTH // 2, HEIGHT // 2))
    restart_rect = restart_text.get_rect(center=(WIDTH // 2, HEIGHT // 2 + 40))
    screen.blit(game_over_text, game_over_rect)
    screen.blit(score_text, score_rect)
    screen.blit(restart_text, restart_rect)
    pygame.display.flip()
    assets['game_over_sound'].play()
    wait_for_key()

def wait_for_key():
    pygame.event.clear()
    while True:
        event = pygame.event.wait()
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        if event.type == pygame.KEYDOWN:
            return

def handle_key(key, current_direction, direction_queue):
    directions = {pygame.K_UP: UP, pygame.K_DOWN: DOWN, pygame.K_LEFT: LEFT, pygame.K_RIGHT: RIGHT}
    new_direction = directions.get(key)
    if new_direction and (new_direction + current_direction).length_squared() > 0:  # Prevent reversing direction
        direction_queue.append(new_direction)

def update_snake(direction_queue, snake, snake_length, apple_position, direction, assets, score):
    if direction_queue:
        new_direction = direction_queue[0]  # Peek at next direction
        if (new_direction + direction).length_squared() > 0:  # Only update if not reversing
            direction = direction_queue.popleft()  # Actually dequeue
    new_head = snake[0] + direction
    if new_head.x < 0 or new_head.x >= WIDTH // CELL_SIZE or new_head.y < 0 or new_head.y >= HEIGHT // CELL_SIZE or new_head in snake:
        return False, direction, snake_length, apple_position, score
    snake.insert(0, new_head)
    if len(snake) > snake_length:
        snake.pop()
    if snake[0] == apple_position:
        snake_length += 1
        score += 1  # Increase score when eating an apple
        assets['eat_sound'].play()
        apple_position = random_apple_position(snake)
    return True, direction, snake_length, apple_position, score


def draw_score(screen, font, score):
    score_text = font.render(f'Score: {score}', True, WHITE)
    screen.blit(score_text, (10, 10))

def load_high_score():
    try:
        with open("high_score.txt", "r") as file:
            return int(file.read().strip())  # Read and strip any extraneous whitespace
    except (IOError, ValueError):  # Handle file not existing or being empty
        return 0

def save_high_score(high_score):
    with open("high_score.txt", "w") as file:
        file.write(str(high_score))

def main():
    screen = init_pygame()
    assets = load_assets()
    direction_queue = deque()
    high_score = load_high_score()  # Load the high score at the start

    reset_game = True
    while reset_game:
        snake = [pygame.Vector2(WIDTH // 2 // CELL_SIZE, HEIGHT // 2 // CELL_SIZE)]
        direction = UP
        direction_queue.append(direction)
        apple_position = random_apple_position(snake)
        snake_length = 1
        move_time = 0
        score = 0

        running = True
        while running:
            dt = assets['clock'].tick(FRAME_RATE) / 1000.0
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                elif event.type == pygame.KEYDOWN:
                    handle_key(event.key, direction, direction_queue)

            move_time += dt * 1000
            if move_time >= MOVE_INTERVAL:
                move_time %= MOVE_INTERVAL
                running, direction, snake_length, apple_position, score = update_snake(direction_queue, snake, snake_length, apple_position, direction, assets, score)

            screen.fill(BLACK)
            draw_snake(screen, snake)
            draw_apple(screen, apple_position)
            draw_score(screen, assets['font'], score)
            pygame.display.update()

            if not running:  # Game over condition
                if score > high_score:
                    high_score = score  # Update high score if current score is greater
                    save_high_score(high_score)  # Save the new high score
                show_game_over(screen, assets['font'], score, high_score, assets)
                reset_game = True  # Set to False if you want the game to end after game over

if __name__ == '__main__':
    main()
